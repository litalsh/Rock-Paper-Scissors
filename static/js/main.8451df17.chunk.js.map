{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","computerResult","optionsArray","item","image","useState","userScore","setUserScore","computerScore","setComputerScore","userSelectDisplay","setUserSelectDisplay","computerSelectDisplay","setComputerSelectDisplay","random","randomNumber","Math","floor","selectHandler","userSelection","console","log","user","computer","result","className","src","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sRAgGeA,MA7Ff,WACE,IAUIC,EAVEC,EAAe,CAAC,CAAEC,KAAM,OAAQC,MAAO,qBAC7C,CAAED,KAAM,QAASC,MAAO,sBACxB,CAAED,KAAM,WAAYC,MAAO,0BAHd,EAKqBC,mBAAS,GAL9B,mBAKNC,EALM,KAKKC,EALL,OAM6BF,mBAAS,GANtC,mBAMNG,EANM,KAMSC,EANT,OAOqCJ,mBAAS,MAP9C,mBAONK,EAPM,KAOaC,EAPb,OAQ6CN,mBAAS,MARtD,mBAQNO,EARM,KAQiBC,EARjB,KAaPC,EAAS,WACb,IAAIC,EAAeC,KAAKC,MAAsB,EAAhBD,KAAKF,UACnC,OAAOZ,EAAaa,IA2BhBG,EAAgB,SAACC,GACrBC,QAAQC,IAAI,SAAUf,EAAW,aAAcE,GAC/CY,QAAQC,IAAIF,GACZR,EAAqBQ,EAAcf,OACnCH,EAAiBa,IACjBD,EAAyBZ,EAAeG,OACxCgB,QAAQC,IAAIpB,GACZ,IA/BcqB,EAAMC,EA+BhBC,GA/BUF,EA+BMH,EAAchB,KA/BdoB,EA+BoBtB,EAAeE,KA9BnDmB,IAASC,EACJ,MAEI,SAATD,GAAgC,UAAbC,EACd,WAEI,SAATD,GAAgC,aAAbC,GAGV,UAATD,GAAiC,SAAbC,EAFf,OAKI,UAATD,GAAiC,aAAbC,GAGX,aAATD,GAAoC,SAAbC,EAFlB,WAKI,aAATD,GAAoC,UAAbC,EAClB,YADT,GAaAH,QAAQC,IAAIG,GACG,SAAXA,GACFjB,EAAaD,EAAY,GAEZ,aAAXkB,GACFf,EAAiBD,EAAgB,IAarC,OACE,yBAAKiB,UAAU,OACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,UACb,0BAAMA,UAAU,SAAQ,6CAA2BnB,GACnD,0BAAMmB,UAAU,SAAQ,gDAA8BjB,IAExD,yBAAKiB,UAAU,qBACb,yBAAKA,UAAU,WAAU,yBAAKC,IAAKhB,KACnC,yBAAKe,UAAU,WAAU,yBAAKC,IAAKd,MAErC,yBAAKa,UAAU,wBACb,iDACA,yBAAKA,UAAU,cACb,4BAAQA,UAAU,gBAAgBE,QAAS,kBAAMT,EAAchB,EAAa,MAAK,yBAAKwB,IAAI,uBAC1F,4BAAQD,UAAU,gBAAgBE,QAAS,kBAAMT,EAAchB,EAAa,MAAK,yBAAKwB,IAAI,wBAC1F,4BAAQD,UAAU,gBAAgBE,QAAS,kBAAMT,EAAchB,EAAa,MAAK,yBAAKwB,IAAI,2BAC1F,4BAAQD,UAAU,gBAAgBE,QAAS,kBAAMT,EAAcJ,OAAW,yBAAKY,IAAI,8BC5E3EE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.8451df17.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  const optionsArray = [{ item: 'rock', image: './images/rock.svg' },\n  { item: 'paper', image: './images/paper.svg' },\n  { item: 'scissors', image: './images/scissors.svg' }];\n\n  const [userScore, setUserScore] = useState(0);\n  const [computerScore, setComputerScore] = useState(0);\n  const [userSelectDisplay, setUserSelectDisplay] = useState(null);\n  const [computerSelectDisplay, setComputerSelectDisplay] = useState(null);\n\n  let userSelected;\n  let computerResult;\n\n  const random = () => {\n    let randomNumber = Math.floor(Math.random() * 3);\n    return optionsArray[randomNumber]\n  };\n\n  const whoWon = (user, computer) => {\n    if (user === computer) {\n      return 'tie'\n    }\n    if (user === 'rock' && computer === 'paper') {\n      return 'computer'\n    }\n    if (user === 'rock' && computer === 'scissors') {\n      return 'user';\n    }\n    if (user === 'paper' && computer === 'rock') {\n      return 'user'\n    }\n    if (user === 'paper' && computer === 'scissors') {\n      return 'computer'\n    }\n    if (user === 'scissors' && computer === 'rock') {\n      return 'computer'\n    }\n    if (user === 'scissors' && computer === 'paper') {\n      return 'user'\n    }\n  };\n\n  const selectHandler = (userSelection) => {\n    console.log('user: ', userScore, 'computer: ', computerScore);\n    console.log(userSelection);\n    setUserSelectDisplay(userSelection.image);\n    computerResult = random();\n    setComputerSelectDisplay(computerResult.image);\n    console.log(computerResult);\n    let result = whoWon(userSelection.item, computerResult.item);\n    console.log(result);\n    if (result === 'user') {\n      setUserScore(userScore + 1)\n    }\n    if (result === 'computer') {\n      setComputerScore(computerScore + 1)\n    }\n  }\n  const firstLoad = () => {\n    return (\n      <>\n\n        {console.log('first load ' + ' userselected: ' + userSelected)}\n      </>\n    )\n  }\n\n\n  return (\n    <div className=\"App\">\n      <div className='board'>\n        <div className='scores'>\n          <span className=\"score\"><strong>Human :  </strong>{userScore}</span>\n          <span className=\"score\"><strong>Computer :  </strong>{computerScore}</span>\n        </div>\n        <div className='palyers-container'>\n          <div className='players'><img src={userSelectDisplay} /></div>\n          <div className='players'><img src={computerSelectDisplay} /></div>\n        </div>\n        <div className='selections-container'>\n          <h3>Choose you weapon</h3>\n          <div className='selections'>\n            <button className='selection-btn' onClick={() => selectHandler(optionsArray[0])}><img src='./images/rock.svg' /></button>\n            <button className='selection-btn' onClick={() => selectHandler(optionsArray[1])}><img src='./images/paper.svg' /></button>\n            <button className='selection-btn' onClick={() => selectHandler(optionsArray[2])}><img src='./images/scissors.svg' /></button>\n            <button className='selection-btn' onClick={() => selectHandler(random())}><img src='./images/random.svg' /></button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}